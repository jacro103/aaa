package org.escuelaing.eci.repository.place;

import org.escuelaing.eci.repository.location.LocationA;
import org.escuelaing.eci.repository.rating.Rating;
import org.escuelaing.eci.repository.rating.RatingDto; // Asegúrate de importar RatingDto
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DataMongoTest
public class PlaceRepositoryTest {

    @Autowired
    private PlaceRepository placeRepository;

    @BeforeEach
    public void setUp() {
        placeRepository.deleteAll(); // Asegúrate de que el repositorio esté vacío antes de cada prueba
    }

    @AfterEach
    public void tearDown() {
        placeRepository.deleteAll(); // Limpia después de cada prueba
    }

    @Test
    public void testSavePlace() {
        LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");
        
        // Crear RatingDto y luego Rating
        RatingDto ratingDto = new RatingDto();
        Rating rating = new Rating(ratingDto);

        Place place = new Place("1", "Best Restaurant", "A great place to eat", "password123", 
                                "Italian", "$$$", location, rating);
        
        Place savedPlace = placeRepository.save(place);

        assertNotNull(savedPlace.getId()); // ID should be generated by MongoDB
        assertEquals(place.getName(), savedPlace.getName());
        assertEquals(place.getDescription(), savedPlace.getDescription());
        assertEquals(place.getFoodType(), savedPlace.getFoodType());
        assertEquals(place.getValue(), savedPlace.getValue());
        assertEquals(place.getLocation(), savedPlace.getLocation());
        assertEquals(place.getRating(), savedPlace.getRating());
    }

    @Test
public void testFindPlaceById() {
    // Crear LocationA
    LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");

    // Crear RatingDto y luego Rating
    RatingDto ratingDto = new RatingDto(); // Asegúrate de inicializar ratingDto adecuadamente
    Rating rating = new Rating(ratingDto);

    // Crear Place
    Place place = new Place("1", "Best Restaurant", "A great place to eat", "password123", 
                            "Italian", "$$$", location, rating);
    placeRepository.save(place);

    // Buscar el Place por ID
    Optional<Place> foundPlace = placeRepository.findById(place.getId());
    assertTrue(foundPlace.isPresent());
    assertEquals(place.getName(), foundPlace.get().getName());
}


    @Test
    public void testDeletePlace() {
        LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");
        
        // Crear RatingDto y luego Rating
        RatingDto ratingDto = new RatingDto();
        Rating rating = new Rating(ratingDto);

        Place place = new Place("1", "Best Restaurant", "A great place to eat", "password123", 
                                "Italian", "$$$", location, rating);
        placeRepository.save(place);

        placeRepository.delete(place);
        Optional<Place> foundPlace = placeRepository.findById(place.getId());
        assertFalse(foundPlace.isPresent());
    }
}
