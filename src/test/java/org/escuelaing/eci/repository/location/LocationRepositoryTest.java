package org.escuelaing.eci.repository.location;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.test.annotation.Rollback;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DataMongoTest
public class LocationRepositoryTest {

    @Autowired
    private LocationRepository locationRepository;

    @BeforeEach
    public void setUp() {
        locationRepository.deleteAll(); // Asegúrate de que el repositorio esté vacío antes de cada prueba
    }

    @AfterEach
    public void tearDown() {
        locationRepository.deleteAll(); // Limpia después de cada prueba
    }

    @Test
    public void testSaveLocation() {
        LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");
        LocationA savedLocation = locationRepository.save(location);

        assertNotNull(savedLocation.getId()); // ID should be generated by MongoDB
        assertEquals(location.getLat(), savedLocation.getLat());
        assertEquals(location.getLon(), savedLocation.getLon());
        assertEquals(location.getAddress(), savedLocation.getAddress());
    }

    @Test
    public void testFindLocationById() {
        LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");
        locationRepository.save(location);

        Optional<LocationA> foundLocation = locationRepository.findById(location.getId());
        assertTrue(foundLocation.isPresent());
        assertEquals(location.getAddress(), foundLocation.get().getAddress());
    }

    @Test
    public void testDeleteLocation() {
        LocationA location = new LocationA("1", 40.7128f, -74.0060f, "New York, NY");
        locationRepository.save(location);

        locationRepository.delete(location);
        Optional<LocationA> foundLocation = locationRepository.findById(location.getId());
        assertFalse(foundLocation.isPresent());
    }
}
